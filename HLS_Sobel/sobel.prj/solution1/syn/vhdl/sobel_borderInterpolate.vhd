-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2014.4
-- Copyright (C) 2014 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity sobel_borderInterpolate is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    p : IN STD_LOGIC_VECTOR (11 downto 0);
    len : IN STD_LOGIC_VECTOR (11 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (13 downto 0);
    ap_ce : IN STD_LOGIC );
end;


architecture behav of sobel_borderInterpolate is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv12_1 : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    constant ap_const_lv13_0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv14_3FFE : STD_LOGIC_VECTOR (13 downto 0) := "11111111111110";
    constant ap_const_logic_0 : STD_LOGIC := '0';

    signal len_read_reg_195 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_read_reg_200 : STD_LOGIC_VECTOR (11 downto 0);
    signal or_cond_58_fu_63_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond_58_reg_205 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_fu_69_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_reg_211 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_p2_fu_89_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal p_p2_reg_217 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_3_fu_97_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_reg_223 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp1_fu_109_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp1_reg_228 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_fu_39_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_cast1_fu_35_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal len_cast4_cast_fu_53_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_s_fu_57_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal rev_fu_47_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_63_fu_75_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_assign_fu_83_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_not_fu_103_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_4_fu_121_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_4_cast_cast_fu_128_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_5_fu_132_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal p_p2_cast_cast_fu_118_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal sel_tmp6_demorgan_fu_148_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp6_fu_152_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp7_fu_158_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal newSel_fu_163_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal sel_tmp2_fu_144_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_cast_cast_fu_115_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal p_assign_1_fu_138_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal or_cond_fu_174_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal newSel_cast_fu_170_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal newSel9_fu_180_p3 : STD_LOGIC_VECTOR (13 downto 0);


begin




    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_ce)) then
                len_read_reg_195 <= len;
                or_cond_58_reg_205 <= or_cond_58_fu_63_p2;
                p_p2_reg_217 <= p_p2_fu_89_p3;
                p_read_reg_200 <= p;
                sel_tmp1_reg_228 <= sel_tmp1_fu_109_p2;
                tmp_1_reg_211 <= tmp_1_fu_69_p2;
                tmp_3_reg_223 <= tmp_3_fu_97_p2;
            end if;
        end if;
    end process;
    ap_return <= 
        newSel_cast_fu_170_p1 when (or_cond_fu_174_p2(0) = '1') else 
        newSel9_fu_180_p3;
    len_cast4_cast_fu_53_p1 <= std_logic_vector(resize(unsigned(len),13));
    newSel9_fu_180_p3 <= 
        p_cast_cast_fu_115_p1 when (or_cond_58_reg_205(0) = '1') else 
        p_assign_1_fu_138_p2;
    newSel_cast_fu_170_p1 <= std_logic_vector(resize(unsigned(newSel_fu_163_p3),14));
    newSel_fu_163_p3 <= 
        p_p2_reg_217 when (sel_tmp7_fu_158_p2(0) = '1') else 
        ap_const_lv13_0;
    or_cond_58_fu_63_p2 <= (tmp_s_fu_57_p2 and rev_fu_47_p2);
    or_cond_fu_174_p2 <= (sel_tmp7_fu_158_p2 or sel_tmp2_fu_144_p2);
    p_assign_1_fu_138_p2 <= std_logic_vector(unsigned(tmp_5_fu_132_p2) - unsigned(p_p2_cast_cast_fu_118_p1));
    p_assign_fu_83_p2 <= std_logic_vector(unsigned(ap_const_lv13_0) - unsigned(p_cast1_fu_35_p1));
        p_cast1_fu_35_p1 <= std_logic_vector(resize(signed(p),13));

        p_cast_cast_fu_115_p1 <= std_logic_vector(resize(signed(p_read_reg_200),14));

    p_p2_cast_cast_fu_118_p1 <= std_logic_vector(resize(unsigned(p_p2_reg_217),14));
    p_p2_fu_89_p3 <= 
        p_assign_fu_83_p2 when (tmp_63_fu_75_p3(0) = '1') else 
        p_cast1_fu_35_p1;
    rev_fu_47_p2 <= (tmp_fu_39_p3 xor ap_const_lv1_1);
    sel_tmp1_fu_109_p2 <= (tmp_fu_39_p3 or tmp_not_fu_103_p2);
    sel_tmp2_fu_144_p2 <= (tmp_1_reg_211 and sel_tmp1_reg_228);
    sel_tmp6_demorgan_fu_148_p2 <= (or_cond_58_reg_205 or tmp_1_reg_211);
    sel_tmp6_fu_152_p2 <= (sel_tmp6_demorgan_fu_148_p2 xor ap_const_lv1_1);
    sel_tmp7_fu_158_p2 <= (tmp_3_reg_223 and sel_tmp6_fu_152_p2);
    tmp_1_fu_69_p2 <= "1" when (len = ap_const_lv12_1) else "0";
    tmp_3_fu_97_p2 <= "1" when (unsigned(p_p2_fu_89_p3) < unsigned(len_cast4_cast_fu_53_p1)) else "0";
    tmp_4_cast_cast_fu_128_p1 <= std_logic_vector(resize(unsigned(tmp_4_fu_121_p3),14));
    tmp_4_fu_121_p3 <= (len_read_reg_195 & ap_const_lv1_0);
    tmp_5_fu_132_p2 <= std_logic_vector(unsigned(tmp_4_cast_cast_fu_128_p1) + unsigned(ap_const_lv14_3FFE));
    tmp_63_fu_75_p3 <= p(11 downto 11);
    tmp_fu_39_p3 <= p(11 downto 11);
    tmp_not_fu_103_p2 <= (tmp_s_fu_57_p2 xor ap_const_lv1_1);
    tmp_s_fu_57_p2 <= "1" when (signed(p_cast1_fu_35_p1) < signed(len_cast4_cast_fu_53_p1)) else "0";
end behav;
